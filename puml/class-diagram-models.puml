@startuml class_diagram_models
skinparam DefaultFontName "Times New Roman"
skinparam DefaultFontSize 14

User --|> Model
Setting --|> Model
Category --|> Model
Product --|> Model
Product_option --|> Model
Cart --|> Model
Model <|-- Cart_item
Model <|-- Product_follow
Model <|-- Cost
Model <|-- Order
Model <|-- Order_item

Payment -left-|> Model
Task -right-|> Model

abstract class Model<<T>> {
    +id: int
    +created_at: Datetime
    +updated_at: Datetime

    +save(): T
    +destroy(): void
    +findOne(id: int): T
    +findAll(options: QueryOption): Array<T>
    +update(t: T, options?: QueryOption): Model
    +create(t: T, options?: QueryOption): Model
    +delete(id: int): void
    +findAndCountAll(options: QueryOption): Array<T>
}

object QueryOption {
    +where: object
    +limit: int
    +offset: int
    +order: object
}

class Task {
  +title: string
  +description: string
  +status: string
  +assigned_date: Datetime
  +deadline: Datetime
  +completetion_date: Datetime
  +admin: User
  +employee: User
}

class Setting {
  +key: string
  +value: JSON
}

class Category {
  +name: string
  +description: string
  +link: string
  +image_url: string
}

class Product {
  +name: string
  +detail: string
  +stock: int
  +status: string
  +category: Category
}

class Product_option {
  +name: string
  +type: string
  +product: Product
}

class Cart {
  +user: User
}

class Cart_item {
  +cart: Cart
  +quantity: int
  +product: Product
  +product_option: Product_option
}

class Product_follow {
  +product: Product
  +user: User
}

class User {
  +first_name: string
  +last_name: string
  +email: string
  +hashed_password: string
  +phone: string
  +address: string
  +role: string
  +imgUrl: string
}

class Cost {
  +total_cost: int,
  +cost_type: string,
  +product: Product,
  +employee: User,
  +description: string
}

class Order {
  +user: User
  +status: string
  +total_amount: double
  +discount: double
  +payment_method: string
  +payment_status: string
  +info: JSON
}

class Order_item {
  +order: Order
  +quantity: int
  +product: Product
  +product_option: Product_option
}

class Payment {
  +order: Order
  +method: string
  +bank_code: string
  +status: string
  +amount: int
  +currency: string
  +description: string
  +transaction_id: string
  +transaction_info: string
  +transaction_status: string
  +transaction_time: Date
  +transaction_data: JSON
}


@enduml